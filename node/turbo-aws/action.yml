name: Sets up a pnpm, turbo and aws role (optional)
description: Checkout code, setup pnpm, node, turbo cache, configure aws credentials & install dependencies
inputs:
  name:
    description: Worker name
    required: true

  node_version:
    description: Node version to be used during install
    default: "20"
  npm_token:
    description: Token to be used during install
  npm_registry:
    description: Registry to used during setup, use this settings if you have private packages somewhere.
  npm_scope:
    description: Registry / Package scope
  pnpm_version:
    description: Pnpm version to use during execution
    default: 8.15.1

  aws_role_arn:
    description: AWS role to assume when accessing cloud resources
  aws_region:
    description: AWS region to run against
    default: eu-north-1

  run:
    description: Optional script "injection"

  fetch_depth:
    description: git checkout fetch depth

runs:
  using: composite

  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.fetch_depth }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm_version }}

    - name: Setup Node
      uses: actions/setup-node@v4
      env:
        NODE_AUTH_TOKEN: ${{ inputs.npm_token }}
      with:
        node-version: ${{ inputs.node_version }}
        registry-url: ${{ inputs.npm_registry }}
        scope: ${{ inputs.npm_scope }}
        cache: "pnpm"

    - name: Cache turbo
      uses: actions/cache@v4
      with:
        path: .turbo
        key: ${{ runner.os }}-turbo-${{ github.sha }}-${{ inputs.name }}
        restore-keys: |
          ${{ runner.os }}-turbo-${{ github.sha }}-${{ inputs.name }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      if: ${{ inputs.aws_role_arn != '' }}
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        role-session-name: build-session
        aws-region: ${{ inputs.aws_region }}

    - name: Install Dependencies
      shell: bash
      run: pnpm install --frozen-lockfile

    - name: ${{ inputs.name }}
      shell: bash
      if: ${{ inputs.run != '' }}
      run: ${{ inputs.run }}
